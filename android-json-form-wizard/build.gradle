buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath 'org.apache.commons:commons-lang3:3.7'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.3'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'maven-publish'

jacoco {
    toolVersion = "0.8.3"
    reportsDir = file("$buildDir/reports/jacoco")
}

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultPublishConfig !isReleaseBuild() ? "debug" : "release"

    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        project.archivesBaseName = "opensrp-client-native-form"
        multiDexEnabled true
        testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}


tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file("github.properties")))

def getVersionName = { ->
    return "1.7.21-SNAPSHOT" // Library version
}

def getArtificatId = { ->
    return "opensrp-client-native-form" // Library name
}

publishing {

    repositories {
        maven {
            name = "GitHubPackages"
            /** Configure path of your package repository on Github
             ** Replace GITHUB_USERID with your/organisation Github userID
             ** and REPOSITORY with the repository name on GitHub
             */
            url = uri("https://maven.pkg.github.com/d-tree-org/opensrp-client-native-form")
            credentials {
                /** Create github.properties in root project folder file with
                 ** gpr.usr=GITHUB_USER_ID & gpr.key=PERSONAL_ACCESS_TOKEN
                 ** Set env variable GPR_debugdebugUSER & GPR_API_KEY if not adding a properties file**/

                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
    }

    publications {
        bar(MavenPublication) {
            groupId 'org.smartregister' // Library groupID
            artifactId getArtificatId()
            version getVersionName()
            artifact("$buildDir/outputs/aar/${getArtificatId()}-debug.aar")

            //This is to carter for transitive dependencies within this library
            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == 'unspecified')
                        return
                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)
                    if (!dep.transitive) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        final exclusionsNode = dependencyNode.appendNode('exclusions')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            def exclusion = exclusionsNode.appendNode('exclusion')
                            exclusion.appendNode('groupId', rule.group ?: '*')
                            exclusion.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
                configurations.compile.getDependencies().each { dep -> addDependency(dep, 'compile') }
                configurations.api.getDependencies().each { dep -> addDependency(dep, 'compile') }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, 'runtime') }
            }

        }
    }
}

repositories {
    mavenCentral()
    google()
}

dependencies {
    api('org.smartregister:opensrp-client-simprints:1.0.3-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }
    implementation 'com.github.bmelnychuk:atv:1.2.9'
    implementation('com.google.android.material:material:1.0.0') {
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'support-v4'

    }
    implementation 'com.github.johnkil.print:print:1.3.1'
    implementation 'com.github.rey5137:material:1.2.5'
    implementation 'org.smartregister:opensrp-client-materialedittext:2.1.6-SNAPSHOT'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation('com.github.ganfra:material-spinner:2.0.0') {
        exclude group: 'com.nineoldandroids', module: 'library'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    implementation('com.google.android.gms:play-services-location:16.0.0') {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    implementation('com.google.android.gms:play-services-vision:17.0.2') {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    implementation 'org.jeasy:easy-rules-core:3.3.0'
    implementation 'org.jeasy:easy-rules-mvel:3.3.0'
    implementation 'joda-time:joda-time:2.10.5'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation('io.ona.rdt-capture:lib:1.3.1') {
        exclude group: 'com.android.support.constraint', module: 'constraint-layout'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support.test', module: 'runner'
        exclude group: 'com.android.support.test.espresso', module: 'espresso-core'
        exclude group: 'com.google.android.gms', module: 'play-services-vision'
    }
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'

    implementation('io.ona.CircleProgressbar:lib:0.1.0@aar') {
        exclude group: 'com.android.support.constraint', module: 'constraint-layout'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support.test', module: 'runner'
        exclude group: 'com.android.support.test.espresso', module: 'espresso-core'
    }
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'androidx.multidex:multidex:2.0.0'

    // PowerMock
    def powerMockVersion = '2.0.4'
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$powerMockVersion"
    implementation('com.github.raihan-mpower:FancyAlertDialog-Android:0.3') {
        exclude group: 'com.android.support', module: 'appcompat-v7'

    }

    androidTestImplementation 'com.jayway.android.robotium:robotium-solo:5.6.3'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation('androidx.test.ext:junit:1.1.1') {
        exclude group: 'com.android.support', module: 'appcompat-v7'

    }
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation('androidx.test:rules:1.1.1') {
        exclude group: 'com.android.support', module: 'appcompat-v7'

    }

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
    testImplementation 'org.mockito:mockito-core:3.1.0'
    testImplementation('com.squareup:fest-android:1.0.8') { exclude module: 'support-v4' }
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation "org.json:json:20190722"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {

        xml.enabled = true
        xml.destination = file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml")

        html.enabled = true
        html.destination file("${buildDir}/reports/jacoco/jacocoRootReport/html")
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes/", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
}


apply from: '../maven.gradle'

task javadoc(type: Javadoc) {
    failOnError false
    def mainSrc = "$project.projectDir/src/main/java"
    source = files([mainSrc])
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}
